.dn {
  display: none;
}
.db {
  display: block;
}
.dib {
  display: inline-block;
}
.dt {
  display: table;
}
.di {
  display: inherit;
}
.df {
  display: flex;
}
.dif {
  display: inline-flex;
}
.dg {
  display: grid;
}

// FOR FLEX

// Flex Wrap
.fww {
  flex-wrap: wrap;
}
.fwn {
  flex-wrap: nowrap;
}
.fwwr {
  flex-wrap: wrap-reverse;
}

// FLEX DIRECTION
.fdr {
  flex-direction: row;
}
.fdrr {
  flex-direction: row-reverse;
}
.fdc {
  flex-direction: column;
}
.fdcr {
  flex-direction: column-reverse;
}

// Justify Content
.jcfs {
  justify-content: flex-start;
}
.jcc {
  justify-content: center;
}
.jcfe {
  justify-content: flex-end;
}
.jcsb {
  justify-content: space-between;
}
.jcsa {
  justify-content: space-around;
}
.jcse {
  justify-content: space-evenly;
}

// Align Content

.acfs {
  align-content: flex-start;
}
.acc {
  align-content: center;
}
.acfe {
  align-content: flex-end;
}
.acsb {
  align-content: space-between;
}
.acsa {
  align-content: space-around;
}

// Align Self
.asa {
  align-self: auto;
}
.asfs {
  align-self: flex-start;
}
.asc {
  align-self: center;
}
.asfe {
  align-self: flex-end;
}
.ass {
  align-self: stretch;
}

// Align Items

.aic {
  align-items: center;
}
.ais {
  align-items: flex-start;
}
.aie {
  align-items: flex-end;
}
.aib {
  align-items: baseline;
}
.ais {
  align-items: stretch;
}

// Flex

.f01a {
  flex: 0 1 auto;
}
.f110 {
  flex: 1 1 0%;
}
.f11a {
  flex: 1 1 auto;
}
.fn {
  flex: none;
}

// Flex Grow

.fg1 {
  flex-grow: 1;
}
.fg0 {
  flex-grow: 0;
}

// Flex Shrink
.fs1 {
  flex-shrink: 1;
}
.fs0 {
  flex-shrink: 0;
}

// Order
.ofirst {
  order: -9999;
}
.olast {
  order: 9999;
}

$order: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;
@each $n in $order {
  .o#{$n} {
    order: $n;
  }
}

//  FOR GRID

// PX to REM
$base-size: 16;
$grem: 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48;

@function size($target, $context: $base-size) {
  @return ($target / $context) * 1rem;
}

@each $n in $grem {
  .g#{$n} {
    gap: size($n);
  }
}

@each $n in $grem {
  .rg#{$n} {
    row-gap: size($n);
  }
}

@each $n in $grem {
  .cg#{$n} {
    column-gap: size($n);
  }
}

$gtc: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12;

.bia {
  break-inside: avoid-column;
}
.caa {
  column-span: all;
}

@each $n in $gtc {
  .cc#{$n} {
    column-count: $n;
  }
}

@each $n in $gtc {
  .gtc#{$n} {
    grid-template-columns: repeat($n, minmax(0, 1fr));
  }
}

.gtcn {
  grid-template-columns: none;
}

@each $n in $gtc {
  .gtr#{$n} {
    grid-template-rows: repeat($n, minmax(0, 1fr));
  }
}

.gtrn {
  grid-template-rows: none;
}

// grid columns
.gca {
  grid-column: auto;
}

@each $n in $gtc {
  .gc#{$n} {
    grid-column: span $n / span $n;
  }
}

@each $n in $gtc {
  .gcs#{$n} {
    grid-column-start: $n;
  }
}

.gcsa {
  grid-column-start: auto;
}

@each $n in $gtc {
  .gce#{$n} {
    grid-column-end: $n;
  }
}

.gcea {
  grid-column-end: auto;
}

.gra {
  grid-row: auto;
}

@each $n in $gtc {
  .gr#{$n} {
    grid-row: span $n / span $n;
  }
}

@each $n in $gtc {
  .grs#{$n} {
    grid-row-start: $n;
  }
}

.grsa {
  grid-row-start: auto;
}

@each $n in $gtc {
  .gre#{$n} {
    grid-row-end: $n;
  }
}

.grea {
  grid-row-end: auto;
}
.gafr {
  grid-auto-flow: row;
}
.gafc {
  grid-auto-flow: column;
}
.gafrd {
  grid-auto-flow: row dense;
}
.gafcd {
  grid-auto-flow: column dense;
}

// ================================================ //
// breakpoint
// ================================================ //

@mixin breakpoint-generator($size, $breakpoint-columns) {
  @for $i from 1 through $breakpoint-columns {
    .#{$size}\:dn {
      display: none;
    }
    .#{$size}\:db {
      display: block;
    }
    .#{$size}\:dib {
      display: inline-block;
    }
    .#{$size}\:dt {
      display: table;
    }
    .#{$size}\:di {
      display: inherit;
    }
    .#{$size}\:df {
      display: flex;
    }
    .#{$size}\:dif {
      display: inline-flex;
    }
    .#{$size}\:dg {
      display: grid;
    }

    // FOR FLEX

    // Flex Wrap
    .#{$size}\:fww {
      flex-wrap: wrap;
    }
    .#{$size}\:fwn {
      flex-wrap: nowrap;
    }
    .#{$size}\:fwwr {
      flex-wrap: wrap-reverse;
    }

    // FLEX DIRECTION
    .#{$size}\:fdr {
      flex-direction: row;
    }
    .#{$size}\:fdrr {
      flex-direction: row-reverse;
    }
    .#{$size}\:fdc {
      flex-direction: column;
    }
    .#{$size}\:fdcr {
      flex-direction: column-reverse;
    }

    // Justify Content
    .#{$size}\:jcfs {
      justify-content: flex-start;
    }
    .#{$size}\:jcc {
      justify-content: center;
    }
    .#{$size}\:jcfe {
      justify-content: flex-end;
    }
    .#{$size}\:jcsb {
      justify-content: space-between;
    }
    .#{$size}\:jcsa {
      justify-content: space-around;
    }
    .#{$size}\:jcse {
      justify-content: space-evenly;
    }

    // Align Content

    .#{$size}\:acfs {
      align-content: flex-start;
    }
    .#{$size}\:acc {
      align-content: center;
    }
    .#{$size}\:acfe {
      align-content: flex-end;
    }
    .#{$size}\:acsb {
      align-content: space-between;
    }
    .#{$size}\:acsa {
      align-content: space-around;
    }

    // Align Self
    .#{$size}\:asa {
      align-self: auto;
    }
    .#{$size}\:asfs {
      align-self: flex-start;
    }
    .#{$size}\:asc {
      align-self: center;
    }
    .#{$size}\:asfe {
      align-self: flex-end;
    }
    .#{$size}\:ass {
      align-self: stretch;
    }

    // Align Items

    .#{$size}\:aic {
      align-items: center;
    }
    .#{$size}\:ais {
      align-items: flex-start;
    }
    .#{$size}\:aie {
      align-items: flex-end;
    }
    .#{$size}\:aib {
      align-items: baseline;
    }
    .#{$size}\:ais {
      align-items: stretch;
    }

    // Flex

    .#{$size}\:f01a {
      flex: 0 1 auto;
    }
    .#{$size}\:f110 {
      flex: 1 1 0%;
    }
    .#{$size}\:f11a {
      flex: 1 1 auto;
    }
    .#{$size}\:fn {
      flex: none;
    }

    // Flex Grow

    .#{$size}\:fg1 {
      flex-grow: 1;
    }
    .#{$size}\:fg0 {
      flex-grow: 0;
    }

    // Flex Shrink
    .#{$size}\:fs1 {
      flex-shrink: 1;
    }
    .#{$size}\:fs0 {
      flex-shrink: 0;
    }

    // Order
    .#{$size}\:ofirst {
      order: -9999;
    }
    .#{$size}\:olast {
      order: 9999;
    }

    @each $n in $order {
      .#{$size}\:o#{$n} {
        order: $n;
      }
    }

    @each $n in $grem {
      .#{$size}\:g#{$n} {
        gap: size($n);
      }
    }

    @each $n in $grem {
      .#{$size}\:rg#{$n} {
        row-gap: size($n);
      }
    }

    .#{$size}\:bia {
      break-inside: avoid-column;
    }
    .#{$size}\:caa {
      column-span: all;
    }

    @each $n in $gtc {
      .#{$size}\:cc#{$n} {
        column-count: $n;
      }
    }

    @each $n in $grem {
      .#{$size}\:cg#{$n} {
        column-gap: size($n);
      }
    }

    @each $n in $gtc {
      .#{$size}\:gtc#{$n} {
        grid-template-columns: repeat($n, minmax(0, 1fr));
      }
    }

    .#{$size}\:gtcn {
      grid-template-columns: none;
    }

    @each $n in $gtc {
      .#{$size}\:gtr#{$n} {
        grid-template-rows: repeat($n, minmax(0, 1fr));
      }
    }

    .#{$size}\:gtrn {
      grid-template-rows: none;
    }

    // grid columns
    .#{$size}\:gca {
      grid-column: auto;
    }

    @each $n in $gtc {
      .#{$size}\:gc#{$n} {
        grid-column: span $n / span $n;
      }
    }

    @each $n in $gtc {
      .#{$size}\:gcs#{$n} {
        grid-column-start: $n;
      }
    }

    .#{$size}\:gcsa {
      grid-column-start: auto;
    }

    @each $n in $gtc {
      .#{$size}\:gce#{$n} {
        grid-column-end: $n;
      }
    }

    .#{$size}\:gcea {
      grid-column-end: auto;
    }

    .#{$size}\:gra {
      grid-row: auto;
    }

    @each $n in $gtc {
      .#{$size}\:gr#{$n} {
        grid-row: span $n / span $n;
      }
    }

    @each $n in $gtc {
      .#{$size}\:grs#{$n} {
        grid-row-start: $n;
      }
    }

    .#{$size}\:grsa {
      grid-row-start: auto;
    }

    @each $n in $gtc {
      .#{$size}\:gre#{$n} {
        grid-row-end: $n;
      }
    }

    .#{$size}\:grea {
      grid-row-end: auto;
    }
    .#{$size}\:gafr {
      grid-auto-flow: row;
    }
    .#{$size}\:gafc {
      grid-auto-flow: column;
    }
    .#{$size}\:gafrd {
      grid-auto-flow: row dense;
    }
    .#{$size}\:gafcd {
      grid-auto-flow: column dense;
    }
  }
}

@import "_breakpoint";
